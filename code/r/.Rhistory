plot(lm.out4)
par(mfrow=c(1,1))
lm.out5 = update(lm.out4, data=pressure[-4,])       # delete case 23
summary(lm.out5)
par(mfrow=c(2,2))
plot(lm.out5)
par(mfrow=c(1,1))
lm.out5 = update(lm.out4, data=pressure[-4,])       # delete case 23
summary(lm.out5)
par(mfrow=c(2,2))
plot(lm.out5)
par(mfrow=c(1,1))
pressure
pressure[-4,]
newPress = pressure[-4,]
lm.out5 = update(lm.out4, data=newPress)       # delete case 4
lm.out5 = lm(log(pres) ~ I(1/temp), data = newPress)
summary(lm.out5)
par(mfrow=c(2,2))
plot(lm.out5)
par(mfrow=c(1,1))
lm.out5 = lm(log(newPress$pres) ~ I(1/newPress$temp))
summary(lm.out5)
par(mfrow=c(2,2))
plot(lm.out5)
par(mfrow=c(1,1))
View(newPress)
with(data=newPress, scatter.smooth(pressure~ temperature))
curve(1.629e+01 + (1/-7.322e+03*x), add=T, col="red")
-7.322e+03
1.629e+01
curve(16.29 - 7322/x, add=T, col="red")
curve(16.29 - 7322/pressure, add=T, col="red")
curve(16.29 - 7322/x, add=T, col="red")
with(data=newPress, scatter.smooth(pressure~ temperature))
curve(16.29 - 7322/x, add=T, col="red")
predict(lm.out5, list(temp=new.temps))
new.temps = seq(from=400, to=600, by=50)
predict(lm.out5, list(temp=new.temps))
exp(predict(lm.out5, list(temp=new.temps)))
ls()
rm(ls())
casein = chickwts$weight[chickwts$feed=="casein"]
horsebean = chickwts$weight[chickwts$feed=="horsebean"]
Cohens.d(horsebean, casein)
Cohens.d = function(group1, group2)
{
group1 = group1[!is.na(group1)]          # strip NAs from group 1
group2 = group2[!is.na(group2)]          # strip NAs from group 2
SSE = var(group1)*(length(group1)-1)+var(group2)*(length(group2)-1)
dfE = length(group1)+length(group2)-2
MSE = SSE/dfE
pooled.s = sqrt(MSE)
diff = abs(mean(group1)-mean(group2))
t = diff/(pooled.s*sqrt(1/length(group1)+1/length(group2)))
c(diff=diff,t=t,Cohens.d=abs(mean(group1)-mean(group2))/pooled.s)
}
# e.g
data("chickwts")
casein = chickwts$weight[chickwts$feed=="casein"]
horsebean = chickwts$weight[chickwts$feed=="horsebean"]
Cohens.d(horsebean, casein)
plot(1:100, 1:100, type="n", xlab="", ylab="")
curve(x^2/100, add=TRUE)
text(x=80, y=50, "This is a graph of")
text(x=80, y=45, "the equation")
text(x=80, y=37, expression(y == frac(1,100) * x^2))
plot(1:100, 1:100, type="y", xlab="", ylab="")
curve(x^2/100, add=TRUE)
text(x=80, y=50, "This is a graph of")
text(x=80, y=45, "the equation")
text(x=80, y=37, expression(y == frac(1,100) * x^2))
plot(1:100, 1:100, type="n", xlab="", ylab="")
curve(x^2/100, add=TRUE)
text(x=80, y=50, "This is a graph of")
text(x=80, y=45, "the equation")
text(x=80, y=37, expression(y == frac(1,100) * x^2))
points(x=c(20, 60, 90), y=c(4, 36, 81), pch=6)
points(x=rep(100,10), y=seq(0,90,10), pch=seq(1,20,2))
abline(a=-18, b=1.1, col="red")
abline(a=-18, b=1.1, col="red")
text(x=18, y=0, "A")
text(x=18, y=1.1, "B")
100 + 1.1(100)
100 + 1.1*100)
100 + 1.1*100
abline(a=-18, b=1.1, col="red")
text(x=19, y=0, "A")
text(x=19, y=210, "B")
plot(1:100, 1:100, type="n", xlab="", ylab="")
curve(x^2/100, add=TRUE)
text(x=80, y=50, "This is a graph of")
text(x=80, y=45, "the equation")
text(x=80, y=37, expression(y == frac(1,100) * x^2))
points(x=c(20, 60, 90), y=c(4, 36, 81), pch=6)
points(x=rep(100,10), y=seq(0,90,10), pch=seq(1,20,2))
#"a=the y-intercept" and "b=the slope" of the desired line.
abline(a=-18, b=1.1, col="red")
text(x=19, y=0, "A")
text(x=19, y=210, "B")
18 + 1.1*90
#"a=the y-intercept" and "b=the slope" of the desired line.
abline(a=-18, b=1.1, col="red")
text(x=19, y=0, "A")
text(x=19, y=117, "B") ## add my labels
## Graphics
plot(1:100, 1:100, type="n", xlab="", ylab="")
curve(x^2/100, add=TRUE)
text(x=80, y=50, "This is a graph of")
text(x=80, y=45, "the equation")
text(x=80, y=37, expression(y == frac(1,100) * x^2))
points(x=c(20, 60, 90), y=c(4, 36, 81), pch=6)
points(x=rep(100,10), y=seq(0,90,10), pch=seq(1,20,2))
#"a=the y-intercept" and "b=the slope" of the desired line.
abline(a=-18, b=1.1, col="red")
text(x=19, y=0, "A")
text(x=19, y=117, "B") ## add my labels
text(x=100, y=117, "B") ## add my labels
text(x=100, y=90, "B") ## add my labels
text(x=100, y=97, "B") ## add my labels
text(x=100, y=95, "B") ## add my labels
## Graphics
plot(1:100, 1:100, type="n", xlab="", ylab="")
curve(x^2/100, add=TRUE)
text(x=80, y=50, "This is a graph of")
text(x=80, y=45, "the equation")
text(x=80, y=37, expression(y == frac(1,100) * x^2))
points(x=c(20, 60, 90), y=c(4, 36, 81), pch=6)
points(x=rep(100,10), y=seq(0,90,10), pch=seq(1,20,2))
#"a=the y-intercept" and "b=the slope" of the desired line.
abline(a=-18, b=1.1, col="red")
text(x=19, y=0, "A")
text(x=100, y=95, "B") ## add my labels
abline(h=20, lty=2)             # abline(h=20, lty="dashed") also works
abline(v=20, lty=3)             # abline(v=20, lty="dotted") also works
lines(x=c(40, 40, 60, 60), y=c(80, 100, 100, 80), type="b")
lines(x=c(40, 60), y=c(80, 80), type="l")      # type="lower case L", not
title(main="A Drawing To Put On the Refrigerator!")
title(xlab="This is the x-axis", col.lab="green", cex.lab=1.5)
title(main="A Drawing To Put On the Refrigerator!")
title(xlab="This is the x-axis", col.lab="blue", cex.lab=1.5)
margin.table(UCBAdmissions, c(1,3)) -> Admit.by.Dept
barplot(Admit.by.Dept)
barplot(Admit.by.Dept, beside=T, ylim=c(0,1000), legend=T,
main="Admissions by Department")
data(UCBAdmissions)
par(mfrow=c(1,2))
margin.table(UCBAdmissions, c(1,3)) -> Admit.by.Dept
barplot(Admit.by.Dept)
barplot(Admit.by.Dept, beside=T, ylim=c(0,1000), legend=T,
main="Admissions by Department")
data(faithful)                       # This is optional.
attach(faithful)
hist(waiting)
hist(waiting, breaks=seq(40,100,10), right=F)
hist(waiting, prob=T)
lines(density(waiting))
detach(faithful)
# Numerical Summaries by Groups
data(chickwts)                  # Weight gain by type of diet.
attach(chickwts)
plot(feed, weight)              # boxplot(weight ~ feed) will also work
boxplot(feed~weight)
title(main="Body Weight of Chicks by Type of Diet")
data(chickwts)                  # Weight gain by type of diet.
attach(chickwts)
plot(feed, weight)              # boxplot(weight ~ feed) will also work
#boxplot(feed~weight)
title(main="Body Weight of Chicks by Type of Diet")
means = tapply(weight, feed, mean)
points(x=1:6, y=means, pch=16)       # pch=16 is a filled circle
detach(chickwts)
data(chickwts)                  # Weight gain by type of diet.
attach(chickwts)
## adding means
means = tapply(weight, feed, mean)
points(x=1:6, y=means, pch=12)       # pch=16 is a filled circle
detach(chickwts)
data(mammals, package="MASS")
attach(mammals)
plot(log(body), log(brain))          # plot(x=body, y=brain, log="xy") is similar (try it)
scatter.smooth(log(body), log(brain))
detach(mammals)
st = as.data.frame(state.x77)
View(st)
# add pop. density
colnames(st)[4] = "Life.Exp"                   # no spaces in variable names, please
colnames(st)[6] = "HS.Grad"                    # ditto
st$Density = st$Population * 1000 / st$Area
round(cor(st), 3)
pairs(st)
par(mfrow=c(3,3))
for(i in 1:9) qqnorm(st[,i], main=colnames(st)[i])
par(mfrow=c(3,3))
for(i in 1:9) qqnorm(st[,i], main=colnames(st)[i])
model1 = lm(Life.Exp ~ ., data=st)
summary(model1)
summary.aov(model1)
model2 = update(model1, .~. -Area)
summary(model2)
anova(model2, model1)
model3 = update(model2, .~. -Illiteracy)
summary(model3)
model4 = update(model3, .~. -Income)
summary(model4)
model5 = update(model4, .~. -Density)
summary(model5)
anova(model5, model4)
anova(model5, model1)
model.int = update(model5, .~.^3)
anova(model5, model.int)
step(model1, direction="backward")
confint(model5)
predict(model5, list(Population=2000, Murder=10.5, HS.Grad=48, Frost=100))
par(mfrow=c(2,2))                    # visualize four graphs at once
plot(model5)
par(mfrow=c(1,1))
plot(model5, 1)            # syntax: plot(model.object.name, 1)
plot(model5, 2)
plot(model5, 3)
plot(model5, 4)            # syntax: plot(model.object.name, 1)
plot(model5, 5)
names(model5)
model5$coefficients
sort(model5$resid)
sdexpl = c(sd(st$Population), sd(st$Murder), sd(st$HS.Grad), sd(st$Frost))
sdresp = sd(st$Life.Exp)
coef(model5)[2:5] * sdexpl / sdresp
rm(list=ls())
rm(list=ls())                        # clean up (WARNING! this will wipe your workspace
data(airquality)                     # see ?airquality for details on these data
na.omit(airquality) -> airquality    # toss cases with missing values
lm.out = lm(Ozone ~ Solar.R + Wind + Temp + Month, data=airquality)
coef(lm.out)
confint(lm.out)
(prediction = c(1, 200, 11, 80, 6) * coef(lm.out))
sum(prediction)
predict(lm.out, list(Solar.R=200, Wind=11, Temp=80, Month=6), interval="conf")
## Prediction for a single new case...
predict(lm.out, list(Solar.R=200, Wind=11, Temp=80, Month=6), interval="pred")
intervals = confint(lm.out)
t(intervals)
values = c(1,200,11,80,6)
sum(colMeans(t(intervals)) * values)
t(intervals) %*% matrix(values)
# hierarchical regression
nels = read.csv("Keith.csv")
summary(nels)
grades1 = NELS[,c("f1txhstd","byses","bygrads","f1cncpt2","f1locus2")]
grades1 = nels[,c("f1txhstd","byses","bygrads","f1cncpt2","f1locus2")]
summary(grades1)
rm(nels)
apply(grades1, 2, mean, na.rm=T)
apply(grades1, 2, sd, na.rm=T)
sampsize = function(x)  sum(!is.na(x))
apply(grades1, 2, sampsize)
cor(grades1, use="pairwise.complete")
colnames(grades1) = c("std.achieve.score","SES","prev.grades","self.esteem","locus.of.control")
head(grades1)
lm.out = lm(std.achieve.score ~ ., data=grades1)
summary(lm.out)
confint(lm.out)
print(anova(lm.out), digits=7)
grades3 = scale(grades2)
grades3 = as.data.frame(grades3)
coef(lm(std.achieve.score~SES+prev.grades+self.esteem+locus.of.control, data=grades3))
grades3 = scale(grades1)
grades3 = as.data.frame(grades3)
coef(lm(std.achieve.score~SES+prev.grades+self.esteem+locus.of.control, data=grades3))
print(anova(lm.out), digits=7)
cars = mtcars[,c(1,2,6)]
cars$cyl = factor(cars$cyl)
summary(cars)
par(mfrow=c(1,3))
boxplot(mpg ~ cyl, data=cars, xlab="cylinders", ylab="mpg")
boxplot(wt ~ cyl, data=cars, xlab="cylinders", ylab="weight")
plot(mpg ~ wt, data=cars)
lm.out1 = lm(mpg ~ cyl, data=cars)   # aov() works as lm() internally
anova(lm.out1)                       # same as summary.aov(lm.out1)
summary(lm.out1)
with(cars, tapply(mpg, cyl, mean))
lm.out2 = lm(mpg ~ wt + cyl, data=cars)
anova(lm.out2)
summary(lm.out2)
plot(mpg ~ wt, data=cars, pch=as.numeric(cars$cyl), xlab="weight of car in 1000s of pounds")
abline(a=33.99, b=-3.21, lty="solid")
abline(a=33.99-4.26, b=-3.21, lty="dashed")
abline(a=33.99-6.07, b=-3.21, lty="dotted")
anova(lm.out2)
lm.out3 = lm(mpg ~ wt * cyl, data=cars)
anova(lm.out2, lm.out3)
install.packages("faraway")
library("faraway")
data(sexab)
summary(sexab)
plot(ptsd ~ cpa, data=sexab, pch=as.numeric(csa), col=as.numeric(csa))
plot(ptsd ~ cpa, data=sexab, pch=as.numeric(csa), col=as.numeric(csa))
lm.sexab1 = lm(ptsd ~ cpa + csa, data=sexab)
lm.sexab2 = lm(ptsd ~ cpa * csa, data=sexab)
anova(lm.sexab1, lm.sexab2)
anova(lm.sexab1)                     # sequential tests
summary(lm.sexab1)
abline(a=10.25, b= 0.55, lty="dashed", col="black")
abline(a=3.98, b=0.55, lty="dotted", col="red")
data("menarche")
summary(menarche)
plot(Menarche/Total ~ Age, data=menarche)
glm.out = glm(cbind(Menarche, Total-Menarche) ~ Age, family=binomial(logit),
data=menarche)
plot(Menarche/Total ~ Age, data=menarche)
lines(menarche$Age, glm.out$fitted, type="l", col="red")
title(main="Menarche Data with Fitted Logistic Regression Line")
summary(glm.out)
gorilla = read.table(header=T, text="
seen   W   C CW
0 126  86 64
0 118  76 54
0  61  66 44
0  69  48 32
0  57  59 42
0  78  64 53
0 114  61 41
0  81  85 47
0  73  57 33
0  93  50 45
0 116  92 49
0 156  70 45
0  90  66 48
0 120  73 49
0  99  68 44
0 113 110 47
0 103  78 52
0 123  61 28
0  86  65 42
0  99  77 51
0 102  77 54
0 120  74 53
0 128 100 56
0 100  89 56
0  95  61 37
0  80  55 36
0  98  92 51
0 111  90 52
0 101  85 45
0 102  78 51
1 100  66 48
1 112  78 55
1  82  84 37
1  72  63 46
1  72  65 47
1  89  71 49
1 108  46 29
1  88  70 49
1 116  83 67
1 100  69 39
1  99  70 43
1  93  63 36
1 100  93 62
1 110  76 56
1 100  83 36
1 106  71 49
1 115 112 66
1 120  87 54
1  97  82 41
")
write.csv(gorilla, file="gorilla.csv")
cor(gorilla)
with(gorilla, tapply(W, seen, mean))
with(gorilla, tapply(C, seen, mean))
with(gorilla, tapply(CW, seen, mean))
glm.out = glm(seen ~ W * C * CW, family=binomial(logit), data=gorilla)
summary(glm.out)
anova(glm.out, test="Chisq")
anova(glm.out, test="Chisq")
plot(glm.out$fitted)
abline(v=30.5,col="red")
abline(h=.3,col="green")
abline(h=.5,col="green")
text(15,.9,"seen = 0")
text(40,.9,"seen = 1")
ftable(UCBAdmissions, col.vars="Admit")
margin.table(UCBAdmissions, c(2,1))
### begin copying here
ucb.df = data.frame(gender=rep(c("Male","Female"),c(6,6)),
dept=rep(LETTERS[1:6],2),
yes=c(512,353,120,138,53,22,89,17,202,131,94,24),
no=c(313,207,205,279,138,351,19,8,391,244,299,317))
### end copying here and paste into the R Console
write.csv(ucb.df, file = "ucb_admissions_data_logregress.csv")
mod.form = "cbind(yes,no) ~ gender * dept"
glm.out = glm(mod.form, family=binomial(logit), data=ucb.df)
anova(glm.out, test="Chisq")
summary(glm.out)
exp(-1.0521)                         # antilog of the genderMale coefficient
1/exp(-1.0521)
exp(-2.2046)
exp(-2.2046) / exp(-2.1662)
cars = mtcars[,c(1,3,4,6)]
summary(cars)
cor(cars)
pairs(cars, cex=.6)
lm.out = lm(mpg ~ disp * hp * wt, data=cars)
coef(lm.out)          # not shown
fitted(lm.out)        # not shown
residuals(lm.out)     # not shown
summary(lm.out)
library("car")
vif(lm.out)
lm.out = lm(mpg ~ (disp + hp + wt)^2, data=cars)
summary(lm.out)
vif(lm.out)
cars$disp.c = cars$disp - mean(cars$disp)
cars$hp.c = cars$hp - mean(cars$hp)
cars$wt.c = cars$wt - mean(cars$wt)
summary(cars)
lm.out = lm(mpg ~ (disp.c + hp.c + wt.c)^2, data=cars)
vif(lm.out)
lm.add = lm(mpg ~ (disp.c + hp.c + wt.c), data=cars)
anova(lm.add, lm.out)
lm.step = step(lm.out, trace=0)
lm.out = lm(mpg ~ disp.c + hp.c + wt.c + disp.c:wt.c + hp.c:wt.c, data=cars)
summary(lm.out)
lm.out = lm(mpg ~ disp.c + hp.c + wt.c + hp.c:wt.c, data=cars)
summary(lm.out)
lm.out = lm(mpg ~ hp.c + wt.c + hp.c:wt.c, data=cars)
summary(lm.out)
lm.step
vif(lm.out)
par(mfrow=c(2,2))
plot(lm.out, c(1,2,4,5))
confint(lm.out, level=.99)
coplot(mpg ~ hp | wt,      # formula: mpg by hp given wt
data=cars,          # where the data are (the function can be ended here)
rows=1,             # number of rows to put the graphs in
number=3,           # number of graphs to plot
overlap=0)          # don't overlap values of wt across graphs
# look at interactions
coplot(mpg ~ hp | wt,      # formula: mpg by hp given wt
data=cars,          # where the data are (the function can be ended here)
rows=1,             # number of rows to put the graphs in
number=3,           # number of graphs to plot
overlap=0,
panel=panel.smooth,
)          # don't overlap values of wt across graphs
coplot(mpg ~ hp | wt, show.given = F     # formula: mpg by hp given wt
data=cars,          # where the data are (the function can be ended here)
rows=1,             # number of rows to put the graphs in
number=3,           # number of graphs to plot
overlap=0,
panel=panel.smooth,
)          # don't overlap values of wt across graphs
# The top p
coplot(mpg ~ hp | wt, show.given = F,     # formula: mpg by hp given wt
data=cars,          # where the data are (the function can be ended here)
rows=1,             # number of rows to put the graphs in
number=3,           # number of graphs to plot
overlap=0,
panel=panel.smooth,
)
data(sleep)
str(sleep)
View(sleep)
View(sleep)
tapply(extra, group, mean)
data(sleep)
str(sleep)
attach(sleep)
tapply(extra, group, mean)
tapply(extra, group, sd)
tapply(extra, group, length)
detach(sleep)
sleep$group = factor(sleep$group, labels=c("control","treatment"))
summary(sleep)
with(sleep, tapply(extra, group, mean))
with(sleep, tapply(extra, group, sd))
t.test(sleep$extra, sleep$group)
t.test(extra ~ group, var.eq=T)
attach(sleep)
t.test(extra ~ group, var.eq=T)
power.t.test(n=NULL, delta=1.58, sd=1.9, sig.level=.05, power=.8)
with(sleep, t.test(extra ~ group, var.eq=T)$statistic)   # for reference
R = 1000                                       # the number of replicates
t.star = numeric(R)                            # storage for the results
for (i in 1:R) {
group1 = sample(scores, size=10, replace=T)
group2 = sample(scores, size=10, replace=T)
t.star[i] = t.test(group1, group2, var.eq=T)$statistic
}
scores = sleep$extra                           # the data
R = 1000                                       # the number of replicates
t.star = numeric(R)                            # storage for the results
for (i in 1:R) {
group1 = sample(scores, size=10, replace=T)
group2 = sample(scores, size=10, replace=T)
t.star[i] = t.test(group1, group2, var.eq=T)$statistic
}
hist(t.star, freq=F)
points(x=-1.8608, y=0, pch=16)
lines(x<-seq(from=-4, to=4, by=.1), y=dt(x, df=18), col="red")
quantile(t.star, c(.025,.05,.5,.950,.975))
data(crabs, package="MASS")
cara = crabs$CL[crabs$sp=="B"]
summary(cara)
qqnorm(cara)
t.test(cara)$conf.int
R = 1000
boot.means = numeric(R)
for (i in 1:R) {
boot.sample = sample(cara, 100, replace=T)
boot.means[i] = mean(boot.sample)
}
quantile(boot.means, c(.025,.975))
